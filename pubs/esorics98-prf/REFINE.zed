% Author Simon Foley s.foley@cs.ucc.ie
% Time-stamp: <98/05/22 15:30:05 snf22>


\section{Correctness of Refinement} \label{s:refine}

%%\begin{zsection}{REFINE}{toolkit,SCUP,OBJECT,SKPI,SKPIO}


%%\begin{gendef}[X,Y,Z]
%%unzip : ((X\cross Y \fun Z) \cross X) \fun (Y \fun Z) 
%%\where
%%\Label{rule unzipDef}
%%\forall R: (X\cross Y \fun Z); x:X @ \\
%%\forall y:Y | (x,y)\in\dom R @ \\
%%unzip(R,x)~y = R(x,y)
%%\end{gendef}
%%\begin{theorem}{unzipRan}[X,Y,Z]
%%\forall R: (X\cross Y \fun Z); x:X @ \\
%%unzip(R,x) \in (Y \fun Z)
%%\end{theorem}
%%\begin{theorem}{unzipDom}[X,Y,Z]
%%\forall R: (X\cross Y \fun Z); x:X @ \\
%%\dom (unzip(R,x)) = Y 
%%\end{theorem}






\subsubsection*{Data Refinement}


\begin{schema}{Abs[\LEVEL,\LABEL,\FID]}
SCUP[\LEVEL,\LABEL,\FID] 
\also
LabelStore[\LEVEL,\LABEL] \\
LabelStore0[\LEVEL,\LABEL]
\where
\dom~\delta = CurrOIDs 
\also
\forall o:CurrOIDs ; u:\LEVEL @ \\
\t1 \delta(o)\lproj u = \deltaz(u,o)
\end{schema}

\begin{theorem}{InitialStates}[\LEVEL,\LABEL,\FID]
\forall InitialLabelStore0[\LEVEL,\LABEL,\FID] @ 
\\ \t1 \exists LabelStore[\LEVEL,\LABEL] @ Abs[\LEVEL,\LABEL,\FID]
\end{theorem}

\subsubsection*{Operation Refinement}


\begin{zed}
AbsAfter[\LEVEL,\LABEL,\FID] \defs
Abs[\LEVEL,\LABEL,\FID][\delta'/\delta, \deltaz'/\deltaz, CurrOIDs'/CurrOIDs] 
\end{zed}




% The \exists \delta' : OID[\LEVEL] \pfun \LABEL is not very nice. It should 
% really be \exists LabelStore'[\LEVEL,\LABEL]. But using this I could not get 
% Z/EVES to either `invoke' the LabelStore at that point, nor to apply the one
% point rule automatically. So I give the LabelStore in Normalised form. Not really
% the way it should be done (I'd like to know how to get it to work though). 
%
\begin{theorem}{RelabelCorrect}[\LEVEL,\LABEL,\FID]
\forall Relabel0[\LEVEL,\LABEL,\FID]; Abs[\LEVEL,\LABEL,\FID] @
\\
\t1 \exists \delta' : OID[\LEVEL] \pfun \LABEL  @ 
% \t1 \exists LabelStore'[\LEVEL,\LABEL]  @ 
 AbsAfter[\LEVEL,\LABEL,\FID] \land  Relabel[\LEVEL,\LABEL,\FID]
\end{theorem}
\begin{theorem}{ViewLabelCorrect}[\LEVEL,\LABEL,\FID]
\forall ViewLabel0[\LEVEL,\LABEL,\FID]; Abs[\LEVEL,\LABEL,\FID] @
\\
\t1 \exists \delta' : OID[\LEVEL] \pfun \LABEL  @ 
 AbsAfter[\LEVEL,\LABEL,\FID]  \land  ViewLabel[\LEVEL,\LABEL,\FID]
\end{theorem}

%%\end{zsection}


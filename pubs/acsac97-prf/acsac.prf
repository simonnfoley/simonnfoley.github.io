%
% Last Revision September 25, 1997.
% Author Simon Foley, s.foley@cs.ucc.ie
%
% Z/EVES 1.3 proof scripts for the paper "Supporting Secure Canonical 
% Upgrade Policies in Multilevel Secure Object Stores", 
% 13th Annual Computer Security Applications Conference, 
% San Diego, December 1997. Publisher IEEE CS press. 
%
% Note that the Z specs were originally developed for the above paper
% with no plan to mechanize the proofs. Thus, they were geared more towards
% clarity of presentation, rather than ease of mechanized proof/analysis. 
% As a result the proof scripts below get a bit tortured. 
% I plan, when I get time, to restructure the specifications so that the
% proofs are a bit more sensible. 
%
% Aside: You might wonder why I've introduced a series of axiomatic defintions, 
% splitLabelInvisible, splitLabelObject and so forth. Z/EVES 1.3 does not
% fully support free types, so I use these axioms to provide what Z/EVES
% does not know (see the specification file). 
%
% For more information on Z/EVES visit http://www.ora.on.ca/z-eves. 
% [Thanks to Mark Saaltink (ORA Canada) for freely answering, via the zeves 
% mailing list, my questions that arose while doing these proofs.]
% 

% Section 4 Security Analysis of SCUP Manager.

try lemma WF\_CanonicalPolicy;
invoke RelabelPolicy;
rewrite;

try lemma WF\_CP\_CView;
invoke CanonicalPolicy;
invoke RelabelPolicy;
rewrite;

try lemma WF\_CP\_NWD;
invoke CanonicalPolicy;
invoke RelabelPolicy;
rewrite;

try lemma WF\_CP\_NRU;
invoke CanonicalPolicy;
invoke RelabelPolicy;
rewrite;

try lemma WF\_Relabel; reduce;

try lemma WF\_ViewLabel; reduce; 

try lemma WF\_CopyLabel; reduce; 

try lemma WF\_VEquiv; reduce; 

try lemma WF\_LabelLevels; reduce; 

try lemma WF\_LabelProjection; reduce; 

try lemma WF\_Mark; reduce; 

try lemma WF\_Upgrade; reduce; 

try lemma WF\_Ref; reduce; 

try lemma WF\_Strip; reduce; 

try lemma WF\_HLUpgrade; reduce;

try lemma WF\_HLMark; reduce; 

try lemma WF\_HLBlind; reduce; 

try lemma Relabel\_NWD;
invoke VEquiv;
invoke Relabel;
invoke \Delta LabelStore;
invoke LabelStore;
prenex; rewrite;
invoke SCUP;
invoke CP\_NWD;
instantiate f == rfun?, s == req?, v == vl, a == \delta oid?;
equality substitute;
use applyInRanPfun @ X == OID[\LEVEL], Y == \LABEL, f == \delta, a == oid?;
reduce;
split o = oid?;
cases;
  equality substitute o;
  reduce;
next;
  reduce;
next;

try lemma ViewLabel\_NWD;
invoke VEquiv;
invoke ViewLabel;
invoke \Xi SCUP;
invoke \Xi LabelStore;
rewrite;

try lemma CopyLabel\_NWD;
invoke VEquiv;
invoke CopyLabel;
invoke \Delta LabelStore;
invoke \Xi SCUP;
rewrite;
reduce;
equality substitute;
reduce;

try lemma Relabel\_NRU;
invoke VEquiv;
invoke Relabel;
invoke LabelStore;
rewrite;
prenex;
instantiate o\_\_0 == o;
invoke SCUP;
invoke CP\_NRU;
instantiate
  f == rfun?, s == req?, v == vl, a == \delta oid?, b == \delta'' oid?;
equality substitute;
use applyInRanPfun @ X == OID[\LEVEL], Y == \LABEL, f == \delta, a == oid?;
use applyInRanPfun @ X == OID[\LEVEL], Y == \LABEL, f == \delta'', a == oid?;
reduce;
split o = oid?;
cases;
equality substitute o;
reduce;
next;
reduce;
next;

try lemma ViewLabel\_NRU;
invoke VEquiv;
reduce;
instantiate u == first[\LEVEL, ID] oid?, v == req?, w == vl;
instantiate o == oid?;
instantiate o\_\_0 == oid?;
instantiate v\_\_0 == vl, w\_\_0 == req?, a == \delta oid?, b == \delta'' oid?;
use applyInRanFun
  @ X == OID[\LEVEL], Y == \LEVEL, f == first[\LEVEL, ID], a == oid?;
use applyInRanPfun @ X == OID[\LEVEL], Y == \LABEL, f == \delta, a == oid?;
use applyInRanPfun @ X == OID[\LEVEL], Y == \LABEL, f == \delta'', a == oid?;
reduce;

try lemma CopyLabel\_NRU;
split (first[\LEVEL, ID] oid?, req?) \in (\_ \fleq \_);
cases;
next;
invoke CopyLabel;
simplify;
next;
invoke VEquiv;
simplify;
split (req?, vl) \in (\_ \fleq \_);
cases;
instantiate o == (req?, newid?);
use applyInRanFun
  @ X == OID[\LEVEL], Y == \LEVEL, f == first[\LEVEL, ID], a == (req?, newid?);
invoke OID;
rewrite;
cases;
invoke CopyLabel;
simplify;
cases;
prenex;
equality substitute \delta';
equality substitute \delta''';
instantiate o\_\_0 == o;
split (first[\LEVEL, ID] oid?, req?) \in (\_ \fleq \_);
cases;
use applyInRanFun
  @ X == OID[\LEVEL], Y == \LEVEL, f == first[\LEVEL, ID], a == o;
invoke OID;
rewrite;
next;
use applyInRanFun
  @ X == OID[\LEVEL], Y == \LEVEL, f == first[\LEVEL, ID], a == oid?;
rewrite;
next;
simplify;
invoke SCUP;
invoke CP\_CView;
invoke CanonicalPolicy;
invoke RelabelPolicy;
invoke FlowPolicy;
instantiate u == first[\LEVEL, ID] oid?, v == req?, w == vl;
invoke OID;
use applyInRanFun
  @ X == OID[\LEVEL], Y == \LEVEL, f == first[\LEVEL, ID], a == oid?;
reduce;
next;
rewrite;
split (req?, newid?) \in \dom[\LEVEL \cross ID, \LABEL] \delta;
cases;
rewrite;
simplify;
reduce;
next;
rewrite;
simplify;
invoke CopyLabel;
use applyInRanFun
  @ X == OID[\LEVEL], Y == \LEVEL, f == first[\LEVEL, ID], a == oid?;
reduce;
instantiate u == first[\LEVEL, ID] oid?, v == req?, w == vl;
instantiate o == oid?;
use applyInRanFun
  @ X == OID[\LEVEL], Y == \LEVEL, f == first[\LEVEL, ID], a == oid?;
reduce;
cases;
prenex;
instantiate o\_\_0 == o;
equality substitute \delta''';
equality substitute \delta';
reduce;
next;
prenex;
instantiate o\_\_0 == o;
equality substitute \delta''';
equality substitute \delta';
reduce;
next;
simplify;
invoke CopyLabel;
simplify;
reduce;
prenex;
instantiate o\_\_0 == o;
equality substitute \delta';
equality substitute \delta''';
use applyInRanFun
  @ X == OID[\LEVEL], Y == \LEVEL, f == first[\LEVEL, ID], a == o;
reduce;
next;


% Section 6 Security Analysis of ProxyPolicy

% Some Z toolkit laws and more. 

\begin{theorem}{rule dresOver}[X,Y]
\forall A:\power X; R,Q:X\rel Y @ 
A\dres (Q\oplus R) = (A\dres Q) \oplus (A\dres R) 
\proof
apply extensionality;
prenex;
cases;
apply inDres; rewrite; apply oplusDef;
rewrite;
next;
apply oplusDef; rewrite;
next;
\end{theorem}

\begin{theorem}{rule oplusEmpty}[X,Y]
\forall  R: X\rel Y @ 
R \oplus \emptyset = R
\proof
apply oplusDef;
rewrite;
\end{theorem}

\begin{theorem}{rule drescup}[X,Y]
\forall A:\power X; R,Q : X\rel Y @ 
A\dres (Q\cup R) = (A\dres Q) \cup (A\dres R) 
\proof
apply extensionality;
prenex;
rewrite;
\end{theorem}

\begin{theorem}{rule computeDiff3}[X]
\forall x:X; S,T:\power X | \lnot x\in S @ 
S\cap (T\setminus \{x\}) = S\cap T
\proof 
apply extensionality;
prenex;
rewrite;
\end{theorem}

\begin{theorem}{rule capDiff}[X]
\forall S,T,V:\power X @ 
S\cap (T \setminus V) = (S\cap T) \setminus V 
\proof 
apply extensionality;
prenex;
rewrite;
\end{theorem}

\begin{theorem}{rule dresFunction}[X,Y]
\forall f:X\pfun Y; S :\power X @ 
  S \dres f \in X \pfun Y
\proof 
rewrite;
\end{theorem}

try lemma WF\_LabelLevels; 
reduce;

try lemma WF\_LabelProjection; 
reduce; apply dres\_result;
apply inPower; 
prenex;
reduce;

try lemma WF\_splitFidref;
use isInDomRan @ X == OID[Level], Y == Fid, f == \refp;
with disabled (domFunction) rewrite;
apply inDom;
invoke OID;
rewrite;

try lemma WF\_MkProxy; reduce;

try lemma WF\_Mark; reduce;

try lemma WF\_UnMark; reduce;

try lemma WF\_Upgrade; reduce;

try lemma WF\_Ref; 
rewrite; 
use OID @ \LEVEL == Level; 
with enabled (inPower) rewrite;

try lemma WF\_Strip;
reduce;

\begin{theorem}{grule OIDtype}[C]
OID[C] \in \power(C \cross ID)
\proof
reduce;
\end{theorem}

\begin{theorem}{rule CanonPolicyTrans}[C,L,F]
CanonicalPolicy[C,L,F] \implies
(\forall u,v,w: C | u\fleq v \land v \fleq w @  u \fleq w)
\proof
reduce;
instantiate u\_\_0 == u, v\_\_0 == v, w\_\_0 == w;
rewrite;
\end{theorem}

\begin{theorem}{Monobound}
LabelProjection \implies 
(\forall v,w : Level @ w \fleq v \implies \bound(w) \subseteq \bound(v))
\proof 
invoke LabelProjection;
rewrite;
instantiate x == w;
instantiate x == v;
equality substitute;
apply inPower;
prenex;
rewrite;
\end{theorem}

\begin{theorem}{boundFleq}
\forall LabelProjection @ \\
\t1 \forall v,w:Level @ \\
\t2 w \fleq v \iff w  \in \bound(v)
\proof
invoke LabelProjection; rewrite;
instantiate x == v;
equality substitute; rewrite;
split (w, v) \in (\_ \fleq \_);
cases; rewrite;
next; rewrite;
next;
\end{theorem}


\begin{theorem}{boundinCap}
\forall LabelProjection; A,B:\power Level; w,v:Level | w\fleq v @
(A \cap \bound(v) = B \cap \bound(v) \implies (w\in A \iff w\in B) )
\end{theorem}

try lemma boundinCap;
use boundFleq
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound == \bound,
    v == v, w == w;
rewrite;
conjunctive;
rewrite;
split
        w \in A \cap[Level] \bound v \\
  \land w \in B \cap[Level] \bound v;
cases;
rewrite;
apply inCap;
use applyInRanFun @ X == Level, Y == \power Level, f == \bound, a == v;
with disabled (inCap) rewrite;
next;
rewrite;
split A \cap[Level] \bound v = B \cap[Level] \bound v;
cases;
next;
rewrite;
next;
split w \in B \cap[Level] \bound v;
cases;
equality substitute A \cap[Level] \bound v;
rewrite;
next;
apply inCap;
use applyInRanFun @ X == Level, Y == \power Level, f == \bound, a == v;
with disabled (inCap) rewrite;
next;




\begin{theorem}{MonoProjection}
LabelProjection \implies 
(\forall a:Label; v,w:Level | w \fleq v @  \\
((a\lproj v) \lproj w) = (a \lproj w))
\end{theorem}

try lemma MonoProjection; 
use splitLabelInvisible @ a == a; rewrite;
use Monobound
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound == \bound,
    v == v, w == w;
rewrite;
invoke LabelProjection;
split a \in \ran \Object;  cases;
  apply inRanFunction; rewrite; 
  prenex;
  apply inCross2; prenex;
  use CanonPolicyTrans
   @ C == Level, L == Label, F == Fid, (\_ \fleq \_) == (\_ \fleq \_),
    \lev == \lev, \Rfun == \Rfun, (\_ \lproj \_) == (\_ \lproj \_),
    invisible == invisible, u == x\_\_0, v == w, w == v;
  split (x\_\_0, w) \in (\_ \fleq \_); cases;
    rewrite;
    instantiate u == x\_\_0, v\_\_0 == v, M == y, P == \emptyset[Level \pfun ID];
    rewrite;
    instantiate u == x, v\_\_0 == w, M == y, P == \emptyset[Level \pfun ID];
    rewrite;
    equality substitute x\_\_0;
equality substitute a;
equality substitute \Object (x, y) \lproj v;
equality substitute \Object (x, y) \lproj w;
instantiate
  u == x, v\_\_0 == w, M == y \cap[Level] \bound v,
  P == \emptyset[Level \pfun ID];
rewrite;
equality substitute \Object (x, y \cap \bound v) \lproj w;
rewrite;
next;
rewrite;
instantiate u == x\_\_0, v\_\_0 == w, M == y, P == \emptyset[Level \pfun ID];
rewrite;
instantiate u == x, v\_\_0 == v, M == y, P == \emptyset[Level \pfun ID];
rewrite;
cases;
equality substitute x\_\_0;
equality substitute a;
equality substitute \Object (x, y) \lproj v;
instantiate
  u == x, v\_\_0 == w, M == y \cap[Level] \bound v,
  P == \emptyset[Level \pfun ID];
rewrite;
next;
invoke CanonicalPolicy;
instantiate u == w, f == \marku;
equality substitute invisible;
rewrite;
next; 
split a \in \ran \Proxy;
cases;
apply inRanFunction;
rewrite;
prenex;
apply inCross3;
prenex;
use CanonPolicyTrans
  @ C == Level, L == Label, F == Fid, (\_ \fleq \_) == (\_ \fleq \_),
    \lev == \lev, \Rfun == \Rfun, (\_ \lproj \_) == (\_ \lproj \_),
    invisible == invisible, u == x\_\_0, v == w, w == v;
split (x\_\_0, w) \in (\_ \fleq \_);
cases;
rewrite;
instantiate u == x\_\_0, v\_\_0 == v, M == y, P == z;
rewrite;
instantiate u == x, v\_\_0 == w, M == y, P == z;
rewrite;
equality substitute x\_\_0;
equality substitute a;
equality substitute \Proxy (x, y, z) \lproj v;
equality substitute \Proxy (x, y, z) \lproj w;
instantiate
  u == x, v\_\_0 == w, M == y \cap[Level] \bound v,
  P == \bound v \dres[Level, ID] z;
rewrite;
equality substitute \Proxy (x, y \cap \bound v, \bound v \dres z) \lproj w;
rewrite;
next;
rewrite;
instantiate u == x\_\_0, v\_\_0 == w, M == y, P == z;
rewrite;
instantiate u == x, v\_\_0 == v, M == y, P == z;
rewrite;
cases;
equality substitute x\_\_0;
equality substitute a;
equality substitute \Proxy (x, y, z) \lproj v;
instantiate 
  u == x, v\_\_0 == w, M == y \cap[Level] \bound v,
  P == \bound v \dres[Level, ID] z;
rewrite;
next;
invoke CanonicalPolicy;
instantiate u == w, f == \marku;
equality substitute invisible;
rewrite;
next; 
invoke CanonicalPolicy;
instantiate u == v, f == \marku;
instantiate u == w, f == \marku;
rewrite;
next;

\begin{theorem}{Proxy\_CPNWD}
ProxyPolicy \implies CP\_NWD[Level,Label,Fid]
\end{theorem}

try lemma Proxy\_CPNWD; 
invoke CP\_NWD;
rewrite;
prenex;
use splitLabelInvisible @ a == a;
rewrite;
split a \in \ran \Proxy;
cases;
apply inRanFunction;
rewrite;
prenex;
apply inCross3;
prenex;
use splitFidref @ f == f;
split f \in \ran[OID[Level], Fid] \refp;
cases;
rewrite;
simplify;
use inRanFunction @ X == OID[Level], Y == Fid, f == \refp, y == f;
rewrite;
split f \in \ran[OID, Fid] \refp;
cases;
rewrite;
simplify;
prenex;
next;
rewrite;
next;
invoke ProxyPolicy;
invoke Ref;
invoke LabelProjection;
use CanonPolicyTrans
  @ C == Level, L == Label, F == Fid, (\_ \fleq \_) == (\_ \fleq \_),
    \lev == \lev, \Rfun == \Rfun, (\_ \lproj \_) == (\_ \lproj \_),
    invisible == invisible, u == x\_\_0, v == s, w == v;
instantiate
  o == x\_\_1, u\_\_0 == x\_\_0, s\_\_0 == s, M\_\_0 == y, P\_\_0 == z;
instantiate u == x, v\_\_0 == v, M == y, P == z;
instantiate u == x, v\_\_0 == v, M == y, P == z \oplus[Level, ID] \{ x\_\_0 \};
rewrite;
equality substitute x\_\_1;
equality substitute a;
equality substitute \Proxy (x, y, z) \lproj v;
equality substitute f;
equality substitute \Rfun (\refp x\_\_0, s, \Proxy (x, y, z));
equality substitute \Proxy (x, y, z \oplus \{ x\_\_0 \}) \lproj v;
invoke OID;
apply inCross2;
prenex;
equality substitute x\_\_0;
rewrite;
equality substitute x\_\_2;
use boundFleq
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound == \bound,
    v == v, w == s;
rewrite;
apply oplusDef;
rewrite;
next;
rewrite;
invoke ProxyPolicy;
simplify;
cases;
invoke Mark;
instantiate u == x\_\_0, s\_\_0 == s, M == y, P == z;
equality substitute;
rewrite;
next;
cases;
invoke UnMark;
instantiate u == x\_\_0, s\_\_0 == s, M == y, P == z;
equality substitute;
rewrite;
next;
cases;
invoke MkProxy;
instantiate u == x\_\_0, s\_\_0 == s, M == y, P == z;
equality substitute;
rewrite;
next;
invoke Upgrade;
apply inRanFunction;
rewrite;
prenex;
instantiate u == x\_\_0, v\_\_0 == x\_\_1, s\_\_0 == s, M == y, P == z;
rewrite;
next;
split a \in \ran \Object;
cases;
invoke ProxyPolicy;
apply inRanFunction;
rewrite;
prenex;
apply inCross2;
prenex;
use splitFidref @ f == f;
split f \in \ran[OID[Level], Fid] \refp;
cases;
rewrite;
simplify;
invoke Ref;
apply inRanFunction;
rewrite;
prenex;
instantiate
  o == x\_\_1, u == x\_\_0, s\_\_0 == s, M == y,
  P == \emptyset[Level \pfun ID];
rewrite;
next;
split f = \marku;
cases;
rewrite;
invoke Mark;
invoke LabelProjection;
rewrite;
use CanonPolicyTrans
  @ C == Level, L == Label, F == Fid, (\_ \fleq \_) == (\_ \fleq \_),
    \lev == \lev, \Rfun == \Rfun, (\_ \lproj \_) == (\_ \lproj \_),
    invisible == invisible, u == x\_\_0, v == s, w == v;
instantiate
  u\_\_0 == x\_\_0, s\_\_0 == s, M\_\_0 == y,
  P\_\_0 == \emptyset[Level \pfun ID];
instantiate u == x, v\_\_0 == v, M == y, P == \emptyset[Level \pfun ID];
instantiate
  u == x, v\_\_0 == v, M == y \cup[Level] \{ s \},
  P == \emptyset[Level \pfun ID];
rewrite;
equality substitute;
equality substitute;
rewrite;
use boundFleq
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound == \bound,
    v == v, w == s;
rewrite;
use computeCap2 @ X == Level, x == s, S == y, T == \bound v;
use applyInRanFun @ X == Level, Y == \power Level, f == \bound, a == v;
rewrite;
next;
split f = \unmark;
cases;
rewrite;
invoke UnMark;
invoke LabelProjection;
rewrite;
use CanonPolicyTrans
  @ C == Level, L == Label, F == Fid, (\_ \fleq \_) == (\_ \fleq \_),
    \lev == \lev, \Rfun == \Rfun, (\_ \lproj \_) == (\_ \lproj \_),
    invisible == invisible, u == x\_\_0, v == s, w == v;
instantiate
  u\_\_0 == x\_\_0, s\_\_0 == s, M\_\_0 == y,
  P\_\_0 == \emptyset[Level \pfun ID];
instantiate u == x, v\_\_0 == v, M == y, P == \emptyset[Level \pfun ID];
instantiate
  u == x, v\_\_0 == v, M == y \setminus[Level] \{ s \},
  P == \emptyset[Level \pfun ID];
rewrite;
equality substitute;
equality substitute;
use boundFleq
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound == \bound,
    v == v, w == s;
use computeDiff3 @ X == Level, x == s, S == \bound v, T == y;
use applyInRanFun @ X == Level, Y == \power Level, f == \bound, a == v;
rewrite;
next;
split f = \upgrade;
cases;
rewrite;
invoke MkProxy;
invoke LabelProjection;
rewrite;
use CanonPolicyTrans
  @ C == Level, L == Label, F == Fid, (\_ \fleq \_) == (\_ \fleq \_),
    \lev == \lev, \Rfun == \Rfun, (\_ \lproj \_) == (\_ \lproj \_),
    invisible == invisible, u == x\_\_0, v == s, w == v;
instantiate
  u\_\_0 == x\_\_0, s\_\_0 == s, M\_\_0 == y,
  P\_\_0 == \emptyset[Level \pfun ID];
instantiate u == x, v\_\_0 == v, M == y, P == \emptyset[Level \pfun ID];
rewrite;
next;
rewrite;
simplify;
invoke Upgrade;
invoke LabelProjection;
rewrite;
apply inRanFunction;
rewrite;
prenex;
instantiate
  u\_\_0 == x\_\_0, v\_\_1 == x\_\_1, s\_\_0 == s, M\_\_0 == y,
  P\_\_0 == \emptyset[Level \pfun ID];
rewrite;
instantiate u == x\_\_0, v\_\_0 == v, M == y, P == \emptyset[Level \pfun ID];
rewrite;
instantiate
  u == x, v\_\_0 == v,
  M == y \cap \ran[Level, Level] (\{ x \} \dres (\_ \fleq \_)),
  P == \emptyset[Level \pfun ID];
rewrite;
use CanonPolicyTrans
  @ C == Level, L == Label, F == Fid, (\_ \fleq \_) == (\_ \fleq \_),
    \lev == \lev, \Rfun == \Rfun, (\_ \lproj \_) == (\_ \lproj \_),
    invisible == invisible, u == x\_\_0, v == x, w == v;
rewrite;
next;
rewrite;
simplify;
invoke ProxyPolicy;
invoke Mark;
invoke LabelProjection;
invoke CanonicalPolicy;
instantiate u == v, f\_\_0 == f;
instantiate u == s, f\_\_0 == f;
rewrite;
next;

\begin{theorem}{ProjectObject}
\forall LabelProjection; a:Label; u,v:Level; M:\power Level @\\
     a\lproj v = \Object(u,M) \implies 
     u \fleq v \land
     (\exists Ma:\power Level @ 
      a = \Object(u,Ma) )
\end{theorem}

try lemma ProjectObject; 
invoke LabelProjection;
use splitLabelObject @ a == a;
split a = \Invisible;
cases;
rewrite;
simplify;
invoke CanonicalPolicy;
instantiate u\_\_0 == v, f == \marku;
rewrite;
next;
split a \in \ran \Proxy;
cases;
rewrite;
simplify;
apply inRanFunction;
rewrite;
prenex;
apply inCross3;
rewrite;
prenex;
instantiate u\_\_0 == x\_\_0, v\_\_0 == v, M\_\_0 == y, P == z;
rewrite;
next;
rewrite;
simplify;
apply inRanFunction;
rewrite;
prenex;
apply inCross2;
rewrite;
prenex;
instantiate
  u\_\_0 == x\_\_0, v\_\_0 == v, M\_\_0 == y, P == \emptyset[Level \cross ID];
rewrite;
equality substitute;
use ObjectInjection;
use applyInRanFun @ X == Level, Y == \power Level, f == \bound, a == v;
use pinjApplicationsEqual
  @ X == Level \cross \power Level, Y == Label, A == Level \cross \power Level,
    B == Label, f == \Object, x == (x, y \cap[Level] \bound v), y == (u, M);
use capSubset @ X == Level, S == y, T == \bound v, U == Level;
rewrite;
equality substitute x;
instantiate Ma == y;
rewrite;
next;

\begin{theorem}{ProjectProxy}
\forall LabelProjection; a:Label; u,v:Level; M:\power Level; P:Level\pfun ID @\\
     a\lproj v = \Proxy(u,M,P) \implies
     u \fleq v \land
     (\exists Ma:\power Level; Pa:Level\pfun ID @ 
      a = \Proxy(u,Ma,Pa) )
\end{theorem}

try lemma ProjectProxy; 
invoke LabelProjection;
use splitLabelObject @ a == a;
split a = \Invisible;
cases;
rewrite;
simplify;
invoke CanonicalPolicy;
instantiate u\_\_0 == v, f == \marku;
rewrite;
next;
split a \in \ran \Proxy;
cases;
rewrite;
simplify;
apply inRanFunction;
rewrite;
prenex;
apply inCross3;
rewrite;
prenex;
instantiate u\_\_0 == x\_\_0, v\_\_0 == v, M\_\_0 == y, P\_\_0 == z;
rewrite;
equality substitute;
use ProxyInjection;
use applyInRanFun @ X == Level, Y == \power Level, f == \bound, a == v;
use pinjApplicationsEqual
  @ X == Level \cross \power Level \cross (Level \pfun ID), Y == Label,
    A == Level \cross \power Level \cross (Level \pfun ID), B == Label,
    f == \Proxy, x == (x, y \cap[Level] \bound v, \bound v \dres[Level, ID] z),
    y == (u, M, P);
use capSubset @ X == Level, S == y, T == \bound v, U == Level;
use dresFunction @ X == Level, Y == ID, f == z, S == \bound v;
rewrite;
equality substitute x;
instantiate Ma == y, Pa == z;
rewrite;
next;
rewrite;
simplify;
apply inRanFunction;
rewrite;
prenex;
apply inCross2;
rewrite;
prenex;
instantiate
  u\_\_0 == x\_\_0, v\_\_0 == v, M\_\_0 == y,
  P\_\_0 == \emptyset[Level \cross ID];
rewrite;
next;

\begin{theorem}{ProjectInvisible}
\forall ProxyPolicy; a:Label; s,v:Level; f:Fid @ \\
a\lproj v = \Invisible \implies 
\Rfun(f, s, a) \lproj v = \Invisible 
\end{theorem}

try lemma ProjectInvisible;
invoke ProxyPolicy;
use splitLabelObject @ a == a;
split a = \Invisible;
cases;
rewrite;
simplify;
invoke Mark;
invoke LabelProjection;
invoke CanonicalPolicy;
instantiate u == s, f\_\_0 == f;
rewrite;
next;
rewrite;
split a \in \ran \Proxy;
cases;
rewrite;
simplify;
apply inRanFunction;
rewrite;
prenex;
apply inCross3;
rewrite;
prenex;
use splitFidref @ f == f;
split f \in \ran[OID[Level], Fid] \refp;
cases;
rewrite;
simplify;
apply inRanFunction;
rewrite;
prenex;
invoke OID;
apply inCross2;
prenex;
invoke Ref;
invoke LabelProjection;
instantiate
  o == (x\_\_2, y\_\_0), u\_\_0 == x\_\_0, s\_\_0 == s, M\_\_0 == y,
  P\_\_0 == z;
instantiate
  u == x\_\_1, v\_\_0 == v, M == y\_\_0, P == z \oplus[Level, ID] \{(x, y)\};
invoke OID;
rewrite;
instantiate u == x\_\_1, v\_\_0 == v, M == y\_\_0, P == z;
rewrite;
next;
split f = \marku;
cases;
rewrite;
invoke Mark;
invoke LabelProjection;
instantiate u\_\_0 == x\_\_0, s\_\_0 == s, M\_\_0 == y, P\_\_0 == z;
instantiate u == x, v\_\_0 == v, M == y, P == z;
rewrite;
next;
split f = \unmark;
cases;
rewrite;
invoke UnMark;
invoke LabelProjection;
instantiate u\_\_0 == x\_\_0, s\_\_0 == s, M\_\_0 == y, P\_\_0 == z;
instantiate u == x, v\_\_0 == v, M == y, P == z;
rewrite;
next;
split f = \upgrade;
cases;
rewrite;
invoke MkProxy;
invoke LabelProjection;
instantiate u\_\_0 == x\_\_0, s\_\_0 == s, M\_\_0 == y, P\_\_0 == z;
instantiate u == x, v\_\_0 == v, M == y, P == z;
rewrite;
next;
rewrite;
simplify;
apply inRanFunction;
rewrite;
prenex;
invoke Upgrade;
invoke LabelProjection;
instantiate
  u\_\_0 == x\_\_0, v\_\_1 == x\_\_1, s\_\_0 == s, M\_\_0 == y, P\_\_0 == z;
instantiate u == x\_\_0, v\_\_0 == v, M == y, P == z;
rewrite;
next;
rewrite;
simplify;
apply inRanFunction;
rewrite;
prenex;
apply inCross2;
prenex;
use splitFidref @ f == f;
split f \in \ran[OID[Level], Fid] \refp;
cases;
rewrite;
simplify;
apply inRanFunction;
rewrite;
prenex;
invoke OID;
apply inCross2;
prenex;
invoke Ref;
invoke LabelProjection;
instantiate
  o == (x\_\_2, y\_\_0), u\_\_0 == x\_\_0, s\_\_0 == s, M\_\_0 == y,
  P\_\_0 == \{\};
instantiate u == x\_\_1, v\_\_0 == v, M == y\_\_0, P == \{\};
invoke OID;
rewrite;
next;
split f = \marku;
cases;
rewrite;
invoke Mark;
invoke LabelProjection;
instantiate u\_\_0 == x\_\_0, s\_\_0 == s, M\_\_0 == y, P\_\_0 == \{\};
instantiate u == x, v\_\_0 == v, M == y \cup[Level] \{ s \}, P == \{\};
instantiate u == x, v\_\_0 == v, M == y, P == \{\};
rewrite;
use cupSubset @ X == Level, S == y, T == \{ s \}, U == Level;
rewrite;
next;
split f = \unmark;
cases;
rewrite;
invoke UnMark;
invoke LabelProjection;
instantiate u\_\_0 == x\_\_0, s\_\_0 == s, M\_\_0 == y, P\_\_0 == \{\};
instantiate u == x, v\_\_0 == v, M == y \setminus[Level] \{ s \}, P == \{\};
instantiate u == x, v\_\_0 == v, M == y, P == \{\};
rewrite;
use applyInRanFun
  @ X == \power Level \cross \power Level, Y == \power Level,
    f == (\_ \setminus \_)[Level], a == (y, \{ s \});
rewrite;
next;
next;
split f = \upgrade;
cases;
rewrite;
invoke MkProxy;
invoke LabelProjection;
instantiate u\_\_0 == x\_\_0, s\_\_0 == s, M\_\_0 == y, P\_\_0 == \{\};
instantiate u == x, v\_\_0 == v, M == y, P == \{\};
rewrite;
next;
rewrite;
simplify;
apply inRanFunction;
rewrite;
prenex;
invoke Upgrade;
invoke LabelProjection;
instantiate
  u\_\_0 == x\_\_0, v\_\_1 == x\_\_1, s\_\_0 == s, M\_\_0 == y, P\_\_0 == \{\};
instantiate
  u == x, v\_\_0 == v,
  M == \ran[Level, Level] (\{ x \} \dres[Level, Level] (\_ \fleq \_) \rres y),
  P == \{\};
instantiate u == x\_\_0, v\_\_0 == v, M == y, P == \{\};
rewrite;
use CanonPolicyTrans
  @ C == Level, L == Label, F == Fid, (\_ \fleq \_) == (\_ \fleq \_),
    \lev == \lev, \Rfun == \Rfun, (\_ \lproj \_) == (\_ \lproj \_),
    invisible == invisible, u == x\_\_0, v == x, w == v;
rewrite;
next;

\begin{theorem}{Proxy\_CPNRU}
\forall ProxyPolicy @ CP\_NRU[Level,Label,Fid]
\end{theorem}

try lemma Proxy\_CPNRU; 
invoke ProxyPolicy;
invoke CP\_NRU;
rewrite;
prenex;
use splitLabelInvisible @ a == a \lproj v;
split a \lproj v \in \ran \Proxy;
cases;
rewrite;
simplify;
apply inRanFunction;
rewrite;
prenex;
apply inCross3;
prenex;
use ProjectProxy
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound == \bound,
    a == a, v == v, u == x\_\_0, M == y, P == z;
rewrite;
prenex;
use ProjectProxy
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound == \bound,
    a == b, v == v, u == x\_\_0, M == y, P == z;
rewrite;
prenex;
invoke LabelProjection;
instantiate u == x\_\_0, v\_\_0 == v, M == Ma\_\_0, P == Pa\_\_0;
instantiate u == x, v\_\_0 == v, M == Ma\_\_0, P == Pa\_\_0;
rewrite;
use ProxyInjection;
use pinjApplicationsEqual
  @ X == Level \cross \power Level \cross (Level \pfun ID), Y == Label,
    A == Level \cross \power Level \cross (Level \pfun ID), B == Label,
    f == \Proxy, x == (x, y, z),
    y == (x, Ma \cap[Level] \bound v, \bound v \dres[Level, ID] Pa);
use applyInRanFun @ X == Level, Y == \power Level, f == \bound, a == v;
use dresFunction @ X == Level, Y == ID, f == Pa, S == \bound v;
use capSubset @ X == Level, S == Ma, T == \bound v, U == Level;
rewrite;
use pinjApplicationsEqual
  @ X == Level \cross \power Level \cross (Level \pfun ID), Y == Label,
    A == Level \cross \power Level \cross (Level \pfun ID), B == Label,
    f == \Proxy, x == (x, y, z),
    y == (x, Ma\_\_0 \cap[Level] \bound v, \bound v \dres[Level, ID] Pa\_\_0);
use dresFunction @ X == Level, Y == ID, f == Pa\_\_0, S == \bound v;
use capSubset @ X == Level, S == Ma\_\_0, T == \bound v, U == Level;
rewrite;
use splitFidref @ f == f;

split f \in \ran[OID[Level], Fid] \refp;
cases;
rewrite;
simplify;
apply inRanFunction;
rewrite;
prenex;
invoke Ref;
invoke OID;
apply inCross2;
prenex;
rewrite;
use CanonPolicyTrans
  @ C == Level, L == Label, F == Fid, (\_ \fleq \_) == (\_ \fleq \_),
    \lev == \lev, \Rfun == \Rfun, (\_ \lproj \_) == (\_ \lproj \_),
    invisible == invisible, u == x, v == s, w == v;
use boundFleq
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound == \bound,
    v == v, w == s;
instantiate
  o == (x\_\_2, y\_\_0), u\_\_0 == x, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == Pa;
instantiate
  o == (x\_\_0, y), u\_\_0 == x, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == Pa;
use boundinCap
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound == \bound,
    A == Ma\_\_0, B == Ma, w == s, v == v;
instantiate
  u == x, v\_\_0 == v, M == Ma, P == Pa \oplus[Level, ID] \{(x\_\_0, y)\};
instantiate
  u == x, v\_\_0 == v, M == Ma, P == Pa\_\_0 \oplus[Level, ID] \{(x\_\_0, y)\};
rewrite;
simplify;
equality substitute;
equality substitute \Rfun (\refp (x\_\_0, y), s, \Proxy (x, Ma, Pa\_\_0));
equality substitute \Rfun (\refp (x\_\_0, y), s, \Proxy (x, Ma\_\_0, Pa));
equality substitute \Proxy (x, Ma, Pa\_\_0 \oplus \{(x\_\_0, y)\}) \lproj v;
equality substitute \Proxy (x, Ma\_\_0, Pa \oplus \{(x\_\_0, y)\}) \lproj v;
equality substitute Ma\_\_0 \cap[Level] \bound v;
equality substitute Ma \cap[Level] \bound v;
equality substitute \bound v \dres[Level, ID] Pa;
equality substitute \bound v \dres[Level, ID] Pa\_\_0;
equality substitute x\_\_0;
use oplusEmpty @ X == Level, Y == ID, R == z;
use inSubset @ x == z, Y == Level \pfun ID, Z == Level \rel ID;
rewrite;


next;
rewrite;
simplify;
cases;
invoke Mark;
instantiate u\_\_0 == x, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == Pa;
instantiate u\_\_0 == x, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == Pa;
rewrite;

next;
cases;
invoke UnMark;
instantiate u\_\_0 == x, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == Pa;
instantiate u\_\_0 == x, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == Pa;
rewrite;
next;
cases;
invoke MkProxy;
instantiate u\_\_0 == x, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == Pa;
instantiate u\_\_0 == x, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == Pa;
rewrite;
next;
invoke Upgrade;
apply inRanFunction;
rewrite;
prenex;
instantiate
  u\_\_0 == x, v\_\_1 == x\_\_1, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == Pa;
instantiate
  u\_\_0 == x\_\_0, v\_\_1 == x, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == Pa;
rewrite;


next;
split a \lproj v \in \ran \Object;
cases;
rewrite;
simplify;
apply inRanFunction;
rewrite;
prenex;
apply inCross2;
prenex;
use ProjectObject
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound == \bound,
    a == a, v == v, u == x\_\_0, M == y;
rewrite;
prenex;
use ProjectObject
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound == \bound,
    a == b, v == v, u == x\_\_0, M == y;
rewrite;
prenex;
invoke LabelProjection;
instantiate u == x\_\_0, v\_\_0 == v, M == Ma\_\_0, P == \{\};
instantiate u == x, v\_\_0 == v, M == Ma\_\_0, P == \{\};
rewrite;
use ObjectInjection;
use pinjApplicationsEqual
  @ X == Level \cross \power Level, Y == Label, A == Level \cross \power Level,
    B == Label, f == \Object, x == (x, y), y == (x, Ma \cap[Level] \bound v);
use applyInRanFun @ X == Level, Y == \power Level, f == \bound, a == v;
use capSubset @ X == Level, S == Ma, T == \bound v, U == Level;
rewrite;
use pinjApplicationsEqual
  @ X == Level \cross \power Level, Y == Label, A == Level \cross \power Level,
    B == Label, f == \Object, x == (x, y),
    y == (x, Ma\_\_0 \cap[Level] \bound v);
use applyInRanFun @ X == Level, Y == \power Level, f == \bound, a == v;
use capSubset @ X == Level, S == Ma\_\_0, T == \bound v, U == Level;
rewrite;
use splitFidref @ f == f;

split f \in \ran[OID[Level], Fid] \refp;
cases;
rewrite;
simplify;
invoke Ref;
apply inRanFunction;
rewrite;
prenex;
instantiate
  o == x\_\_1, u\_\_0 == x, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == \{\};
instantiate
  o == x, u\_\_0 == x\_\_0, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == \{\};
rewrite;
next;
rewrite;
simplify;

cases;
invoke Mark;
use CanonPolicyTrans
  @ C == Level, L == Label, F == Fid, (\_ \fleq \_) == (\_ \fleq \_),
    \lev == \lev, \Rfun == \Rfun, (\_ \lproj \_) == (\_ \lproj \_),
    invisible == invisible, u == x, v == s, w == v;
use boundFleq
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound == \bound,
    v == v, w == s;
instantiate u\_\_0 == x, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == \{\};
instantiate u\_\_0 == x, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == \{\};
instantiate u == x, v\_\_0 == v, M == Ma \cup[Level] \{ s \}, P == \{\};
instantiate u == x, v\_\_0 == v, M == Ma\_\_0 \cup[Level] \{ s \}, P == \{\};
use boundinCap
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound == \bound,
    A == Ma\_\_0, B == Ma, w == s, v == v;
rewrite;
equality substitute;
equality substitute \Object (x, Ma \cup \{ s \}) \lproj v;
equality substitute \Object (x, Ma\_\_0 \cup \{ s \}) \lproj v;
cases;
use computeCap1 @ X == Level, x == s, S == Ma, T == \bound v;
use computeCap1 @ X == Level, x == s, S == Ma\_\_0, T == \bound v;
use applyInRanFun @ X == Level, Y == \power Level, f == \bound, a == v;
rewrite;
next;
use computeCap2 @ X == Level, x == s, S == Ma, T == \bound v;
use computeCap2 @ X == Level, x == s, S == Ma\_\_0, T == \bound v;
use applyInRanFun @ X == Level, Y == \power Level, f == \bound, a == v;
rewrite;

next;
cases;
invoke UnMark;
use CanonPolicyTrans
  @ C == Level, L == Label, F == Fid, (\_ \fleq \_) == (\_ \fleq \_),
    \lev == \lev, \Rfun == \Rfun, (\_ \lproj \_) == (\_ \lproj \_),
    invisible == invisible, u == x, v == s, w == v;
use boundFleq
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound == \bound,
    v == v, w == s;
instantiate u\_\_0 == x, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == \{\};
instantiate u\_\_0 == x, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == \{\};
instantiate u == x, v\_\_0 == v, M == Ma \setminus[Level] \{ s \}, P == \{\};
instantiate
  u == x, v\_\_0 == v, M == Ma\_\_0 \setminus[Level] \{ s \}, P == \{\};
rewrite;

next;
cases;
invoke MkProxy;
use CanonPolicyTrans
  @ C == Level, L == Label, F == Fid, (\_ \fleq \_) == (\_ \fleq \_),
    \lev == \lev, \Rfun == \Rfun, (\_ \lproj \_) == (\_ \lproj \_),
    invisible == invisible, u == x, v == s, w == v;
instantiate u\_\_0 == x, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == \{\};
instantiate u\_\_0 == x, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == \{\};
rewrite;

next;
invoke Upgrade;
rewrite;
apply inRanFunction;
rewrite;
prenex;
use CanonPolicyTrans
  @ C == Level, L == Label, F == Fid, (\_ \fleq \_) == (\_ \fleq \_),
    \lev == \lev, \Rfun == \Rfun, (\_ \lproj \_) == (\_ \lproj \_),
    invisible == invisible, u == x, v == s, w == v;
use boundFleq
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound == \bound,
    v == v, w == s;
instantiate
  u\_\_0 == x, v\_\_1 == x\_\_1, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == \{\};
instantiate
  u\_\_0 == x, v\_\_1 == x\_\_0, s\_\_0 == s, M\_\_0 == Ma, P\_\_0 == \{\};
use applyInRanFun @ X == Level, Y == \power Level, f == \bound, a == v;
instantiate
  u == x\_\_0, v\_\_0 == v,
  M
    == Ma\_\_0
       \cap[Level] \ran[Level, Level]
                   (\{ x\_\_0 \} \dres[Level, Level] (\_ \fleq \_)), P == \{\};
instantiate
  u == x\_\_0, v\_\_0 == v,
  M
    == Ma
       \cap[Level] \ran[Level, Level]
                   (\{ x\_\_0 \} \dres[Level, Level] (\_ \fleq \_)), P == \{\};
rewrite;
equality substitute;
equality substitute;
equality substitute x;
use applyInRanFun @ X == Level, Y == \power Level, f == \bound, a == v;
rewrite;
use capAssociates
  @ X == Level, S == Ma, T == \bound v,
    V == \ran[Level, Level] (\{ x\_\_0 \} \dres[Level, Level] (\_ \fleq \_));
use capAssociates
  @ X == Level, S == Ma\_\_0, T == \bound v,
    V == \ran[Level, Level] (\{ x\_\_0 \} \dres[Level, Level] (\_ \fleq \_));
use applyInRanFun @ X == Level, Y == \power Level, f == \bound, a == v;
with disabled (capAssociates) rewrite;
use dresIsSubset
  @ X == Level, Y == Level, R == (\_ \fleq \_), S == \{ x\_\_0 \};
rewrite;
next;

use applyInRanFun
  @ X == Label \cross Level, Y == Label, f == (\_ \lproj \_), a == (a, v);
rewrite;
simplify;
use ProjectInvisible
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound == \bound,
    a == a, v == v, s == s, f == f;
use ProjectInvisible
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound == \bound,
    a == b, v == v, s == s, f == f;
invoke ProxyPolicy;
rewrite;
next;

\begin{theorem}{Proxy\_CPCView}
\forall ProxyPolicy @ CP\_CView[Level,Label,Fid]
\proof
invoke CP\_CView;
rewrite; prenex;
use MonoProjection
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, 
    \bound==\bound, a == a, w == w, v == v;
use MonoProjection
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, 
    \bound==\bound, a == b, w == w, v == v;
rewrite;
\end{theorem}

\begin{theorem}{SecureProxyPolicy}
\forall ProxyPolicy @ SCUP[Level,Label,Fid]
\proof
use Proxy\_CPNWD
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound==\bound;
use Proxy\_CPNRU
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound==\bound;
use Proxy\_CPCView
  @ (\_ \fleq \_) == (\_ \fleq \_), \lev == \lev, \Rfun == \Rfun,
    (\_ \lproj \_) == (\_ \lproj \_), invisible == invisible, \bound==\bound;
rewrite;
invoke SCUP;
rewrite;
\end{theorem}


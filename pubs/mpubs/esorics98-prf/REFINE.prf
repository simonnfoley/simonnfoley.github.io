% Author Simon Foley s.foley@cs.ucc.ie
% Time-stamp: <98/05/22 10:19:08 snf22>

\begin{zsectionproof}{REFINE}{toolkit,SCUP,OBJECT,SKPI,SKPIO}

declare through ViewLabelCorrect;

try lemma unzip\$domainCheck;
rewrite;
use applyInRanFun[(X \cross Y \fun Z) \cross X, Y \fun Z]
                 [f := unzip, a := (R, x)];
rearrange;
with disabled (applicationInDeclaredRangeFun) rewrite;

try lemma unzipRan; 
rewrite; 

try lemma unzipDom;
use unzipRan[X, Y, Z][R := R, x := x];
with disabled (applicationInDeclaredRangeFun) rewrite;

try lemma Abs\$domainCheck;
invoke LabelStore;
invoke OID;
prove by rewrite;

try lemma InitialStates;
invoke InitialLabelStore0;
invoke Abs;
invoke LabelStore0;
rewrite;
instantiate
  \delta
    == CurrOIDs
       \dres[OID[\LEVEL], \LABEL] unzip[\LEVEL, OID[\LEVEL], \LABEL]
                                  (\deltaz, \ftop);
use unzipDom[\LEVEL, OID[\LEVEL], \LABEL][R := \deltaz, x := \ftop];
invoke LabelStore;
invoke OID;
prove by rewrite;
instantiate o\_\_0 == o, u\_\_0 == u, w == \ftop;
with enabled (SCUPftopall) rewrite;

try lemma RelabelCorrect;
invoke Relabel0;
invoke Relabel;
invoke \Delta LabelStore0;
invoke \Delta LabelStore;
invoke AbsAfter;
invoke Abs;
invoke LabelStore0;
invoke LabelStore;
invoke OID;
prove by rewrite;
split oid? \in \dom[\LEVEL \cross ID, \LABEL] \delta;
cases;
prove by rewrite;
instantiate u\_\_1 == u, o\_\_1 == o;
instantiate o\_\_0 == o, u\_\_0 == u;
split oid? = o;
split (req?, u) \in (\_ \fleq \_);
prove by rewrite;
next;
prove by rewrite;
instantiate o\_\_0 == o, u\_\_0 == u;
split oid? = o;
prove by rewrite;
next;

try lemma ViewLabelCorrect;
invoke ViewLabel0;
invoke ViewLabel;
invoke PreViewLabel;
invoke \Xi LabelStore0;
invoke \Xi LabelStore;
invoke AbsAfter;
invoke Abs;
invoke LabelStore0;
invoke LabelStore;
invoke OID;
prove by rewrite;
instantiate o\_\_0 == o, u\_\_0 == u;
instantiate o\_\_0 == oid?, u\_\_0 == req?;
split
        oid? \in \dom[\LEVEL \cross ID, \LABEL] \delta \\
  \land (oid?.1, req?) \in (\_ \fleq \_);
prove by rewrite;

\end{zsectionproof}
